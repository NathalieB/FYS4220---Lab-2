#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
FYS 4220 - Fall 2013 : Lab Exercise 2
\end_layout

\begin_layout Date
Nathalie Bonatout and Kevin Zaporogetz
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Standard
The goal of this lab was to implement a communication between a temperature
 sensor and a board --- ? thanks to the I2C bus.
 So the first step here was to understand how the the protocol works , then
 to write a vhdl file to translate the finit state machine into code, then
 to write an efficient TestBench to prove that we wrote a functionnal code
 .
\end_layout

\begin_layout Part
Implementation of the vhd file 
\end_layout

\begin_layout Section
Presentation
\end_layout

\begin_layout Subparagraph*
The hardware is composed by a board ( DE2-70) and by a temperature sensor
 ( TMP175) .
 
\end_layout

\begin_layout Standard
We use a serial bus (I2C) to link them .
 The I2C bus requires only two wires to establishe a communication : 
\end_layout

\begin_layout Itemize
SCL ( Serial Clock Line ).
 It is the clock manage by the master to control the slave .
\end_layout

\begin_layout Itemize
SDA ( Serial Data Line ) .
 It is the wire where the adresses and the data transit.
 
\end_layout

\begin_layout Standard
It is a protocal based on the system of ACK/NACK ( Acknowledge or not ).
\end_layout

\begin_layout Section
Writing of the VHD file
\end_layout

\begin_layout Standard
The main point was here to translate the finite state machine into code
 as we said previously.
\end_layout

\begin_layout Standard
To do so, we had to use signals and also generics.
 
\end_layout

\begin_layout Subsection
Finite State Machine
\end_layout

\begin_layout Standard
The first step was to implement the VDHL code for the Finite State Machine.
 It basically means that we began by writing a process to trigger the change
 of our State variable.
 This variable can take the following state: Start (to launch the communication)
, Ack1, Ack2, Idle, Write, Read, Addr, Mack and Stop.
 Each state corresponds to a step of the I2C communication: we begin by
 launching the start condition, then determines which are the registers
 we want to talk to, wait for an acknoledgement of the slave, and if the
 communication went well, we send a Master Acknowledgement.
 To restart the communication, we send a non acknowledgement, and start
 again.
\end_layout

\begin_layout Standard
Then, we added to the code a process determining the influence of the state
 variable on the different variables of our project.
 For example, we had to write how the Start state implies that the 
\begin_inset Quotes eld
\end_inset

Busy
\begin_inset Quotes erd
\end_inset

 variable is high, or how the Iddle state changes it to low.
\end_layout

\begin_layout Subsection
Clock process
\end_layout

\begin_layout Standard
We know that to see clean signals, we had to change the frequency of the
 clock.
 Thus, we implemented a process called 
\begin_inset Quotes eld
\end_inset

clck_process
\begin_inset Quotes erd
\end_inset

, used to divide the period of the clock.
 this is done in two big steps: first of all, we check if the reset button
 was or was not hit.
 If it indeed was hit, we reset everything.
 Else, we just check the state of the clock, and divide it thanks to a counter.
\end_layout

\begin_layout Subsection
And finally, changing SDA and SCL
\end_layout

\begin_layout Standard
As we said it, SDA and SCL are the two wires used by the I2C protocol.
 SDA carries data, and SCL sends the Master clock to its slaves.
 
\end_layout

\begin_layout Standard
We determine a new clock frequency thanks to our clock process, and this
 is the one we assign to the SCL.
 The frequency is now of 62 500Hz, instead of 50MHz.
\end_layout

\begin_layout Standard
For the SDA, we changed it according to the internal variable sda_int, which
 depends on the current state, as expected.
\end_layout

\begin_layout Section
Writing of the Test Bench
\end_layout

\begin_layout Standard
The testbench was here a big challenge, since this is how we debug the main
 code.
 With this kind of program, illustrating Finite State Machine, we have to
 be aware that a inattention mistake can easily happen.
 Which is why we have to write our testbench very carefully.
\end_layout

\begin_layout Standard
The concept of a test bench here is to simulate every inputs that should
 be given by the board components.
 Thus, we have to write a process even for the clock, that should stick
 as closely as possible to was is supposed to happen.
\end_layout

\begin_layout Standard
We definitely had a problem somewhere, that we weren't able to fix due to
 
\series bold
....
 Tu as des idées de raisons ? Là je sèche ~
\end_layout

\begin_layout Section
Conclusion
\end_layout

\end_body
\end_document
